/*
\d,\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^$ 分别是什么?
\d 匹配任意数字0-9，相当于[0-9];
\w 匹配单词字母数字和下划线，相当于[a-zA-Z0-9_];
\s 匹配任何Unicode空白符(制表符，换行符，换页符，回车符)，[/t/n/f/r];
[a-zA-Z0-9] 匹配任意小写字母a-z,大写字母A-Z和数字0-9；
/b 单词边界，在字符集中时退格符；
. 匹配换行符和回车符之外的任意字符;
* 匹配前一项零次或多次,{0,};
+ 匹配前一项一次或多次,{1,};
? 匹配前一项零次或一次,{0,1};
x{3} 匹配x三次;
^ 匹配字符串的开头;
$ 匹配字符串的结尾;
*/
/*贪婪模式和非贪婪模式指的是什么?
贪婪模式：匹配重复字符是尽可能多的匹配，而且允许后续的正则表达式继续匹配;
非贪婪模式： 匹配重复字符是尽可能少的匹配,在待匹配的字符后面跟随一个问号;
*/
/***************************************************************************/
/*写一个trim(str),去除字符串两边的空白字符
function trim(str){
  var reg = /^\s+|\s+$/g;
  return str.replace(reg, '');
}

console.log(trim("            aaa   "));
*/
/***************************************************************************/
/*使用实现 addClass(el, cls)、hasClass(el, cls)、removeClass(el, cls)，使用正则*/
/*写一个函数idEmail(str),判断用户输入的是不是邮箱
function idEmail(str){
  var reg = /^[\w_]+@\w+\.\w+$/;
  return reg.test(str);
}
console.log(idEmail("874177815@qq.com"));
console.log(idEmail("ran@outlook.com"));
console.log(idEmail("ra!n@outlook.com"));
*/
